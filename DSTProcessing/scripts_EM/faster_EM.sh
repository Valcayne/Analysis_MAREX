# This script produces an executeable .sh that merges into the general ntof data processing scripts
# The intention is to make the processing much faster (1 hour vs. 2 days)
# tcsh shell programming: http://www-cs.canisius.edu/ONLINESTUFF/UNIX/shellprogramming.html
# Michael Bacak michael.bacak@cern.ch
# FG 2021-04: adapted for CTA

# FG: flag for using CTA (1) or CASTOR (0)
useCTA=1
DEFAULT_CTA="root://eosctapublicpps.cern.ch" # FG-2021-04-05
DEFAULT_CTA="root://eosctapublicdisk.cern.ch" # MB-2021-07-13
DEFAULT_CASTOR="root://castorpublic.cern.ch"

prefix=$1
UserInput=$2
destdir=$3
submitDIR=$3
listFile=$1.list
lock=$1.lock

RunNumber=$(sed 's/.*run\(.*\)_.*/\1/' <<<"$prefix")


streamprefix=$(sed 's/_.*//' <<<"$prefix")
streamcounter=1
it=2

while [ $it -lt 20 ]; do
	stream=$streamprefix".stream"$it
	if [ -f $stream ]; then
		streamcounter=$((streamcounter + 1))
	fi
	it=$((it + 1))
done

EOSPATH=test
u="$USER"
#echo "$u"
userXRDCP='xrdcp -f -N -C auto -t 3'
if [ "$u" == "ntofpro" ]; then
	destdir=/eos/experiment/ntof/processing/official/$RunNumber
	EOSPATH=root://eospublic.cern.ch
else
	if [[ $submitDIR = *"afs"* ]]; then
		EOSPATH=
    userXRDCP='xrdcp -f -N'

	else
		##EOSPATH=root://eosuser.cern.ch
		EOSPATH=
		    userXRDCP='xrdcp -f -N'

	fi
fi

fileName=$1.script.sh
rm -rf $fileName

echo '#! /bin/tcsh' >$fileName
echo '# THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY ' $USER >>$fileName
echo '# DO NOT ERASE BEFORE BATCH JOBS ARE COMPLETED' >>$fileName
echo 'if ($?LS_SUBCWD) then' >>$fileName
echo '  set locdir=`pwd`' >>$fileName
echo '  set destdir=$LS_SUBCWD' >>$fileName
echo 'else' >>$fileName
echo '  set locdir=/tmp/$USER' >>$fileName
echo '  set destdir='$destdir/ >>$fileName
echo '  set submitDIR='$submitDIR/ >>$fileName
echo '  mkdir -p $locdir ' >>$fileName
echo '  cd $locdir ' >>$fileName
echo 'endif' >>$fileName
echo 'setenv LD_LIBRARY_PATH "/afs/cern.ch/user/n/ntofuser/public/"' >>$fileName
#echo 'source /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc10-opt/setup.csh' >>$fileName



echo ' ' >>$fileName
# echo cat '/proc/cpuinfo'  >> $fileName
# echo 'w'  >> $fileName
echo ' ' >>$fileName
echo echo >>$fileName

#LocalProcessingList=LocalProcessingList.files
#echo 'touch $locdir/'$LocalProcessingList >> $fileName
#echo ' ' >> $fileName

nstreams=$streamcounter
nstreams=$((nstreams + 1)) # to include the index stream

counter=0
counterLimit=0
prg=/afs/cern.ch/user/n/ntofuser/public/raw2root

CastorIDX=""
localIDX=""

while IFS= read -r CastorPath; do
	basename="${CastorPath##*/}"

	if [ $(echo "$counter % $nstreams" | bc) -eq 0 ]; then # catches the idx lines from the list file

		if [ "$CastorPath" != "$CastorIDX" ]; then

			echo rm -rf '$locdir/'*.idx.finished >>$fileName

			CastorIDX=${CastorPath}
			localIDX=${basename}

			# FG: CTA/CASTOR
			# echo echo xrdcp -f -N 'root://castorpublic.cern.ch/'$CastorIDX '$locdir/'$localIDX '&' >> $fileName
			# echo xrdcp -f -N 'root://castorpublic.cern.ch/'$CastorIDX '$locdir/'$localIDX >> $fileName
			if [ $useCTA -eq 1  ]; then
				command="xrdcp -f -N $DEFAULT_CTA/$CastorIDX     \$locdir/$localIDX &  "
			else
				command="xrdcp -f -N $DEFAULT_CASTOR/$CastorIDX  \$locdir/$localIDX &  "
			fi
			echo "echo $command &" >>$fileName
			echo "$command" >>$fileName

			echo wait >>$fileName
			echo ' ' >>$fileName

			echo 'set IDXexists = 0' >>$fileName
			echo 'while ( "$IDXexists" == 0 )' >>$fileName
			echo '  if ( -f $locdir/'$localIDX' ) then' >>$fileName
			echo '    'echo IDX-file $localIDX does exist, start processing >>$fileName
			echo '    set IDXexists = 1' >>$fileName
			echo '  'else >>$fileName
			echo '    'echo IDX-file $localIDX does NOT exist locally, waiting 5 mins and trying again >>$fileName
			echo '    sleep' 300 >>$fileName
			# FG: CTA/CASTOR
			#      echo '    'xrdcp -f -N 'root://castorpublic.cern.ch/'$CastorIDX '$locdir/'$localIDX >> $fileName
			echo "    $command " >>$fileName
			echo '    'wait >>$fileName
			echo '  endif' >>$fileName
			echo 'end' >>$fileName
			echo ' ' >>$fileName

			echo echo >>$fileName
		fi

	else

		# catches the raw lines from the list file

		CastorRAW=${CastorPath}
		localRAW=${basename}

		stream=$(echo ${CastorPath##*_s} | cut -f1 -d".")
		segment=$(echo $CastorPath | sed 's/.*_\([0-9][0-9]*\)_.*/\1/')

		# FG: CTA/CASTOR
		# echo echo xrdcp -f -N 'root://castorpublic.cern.ch/'$CastorRAW '$locdir/'$localRAW '&' >> $fileName
		# echo xrdcp -f -N 'root://castorpublic.cern.ch/'$CastorRAW '$locdir/'$localRAW >> $fileName
		if [ $useCTA -eq 1  ]; then
			command="xrdcp -f -N $DEFAULT_CTA/$CastorRAW  \$locdir/$localRAW "
		else
			command="xrdcp -f -N $DEFAULT_CASTOR/$CastorRAW  \$locdir/$localRAW "
		fi
		echo "echo $command &" >>$fileName
		echo "$command" >>$fileName
		echo wait >>$fileName
		echo ' ' >>$fileName

		echo 'set RAWexists = 0' >>$fileName
		echo 'while ( "$RAWexists" == 0 )' >>$fileName
		echo '  if ( -f $locdir/'$localRAW' ) then' >>$fileName
		echo '    'echo RAW-file $localRAW does exist, start processing >>$fileName
		echo '    set RAWexists = 1' >>$fileName
		echo '  'else >>$fileName
		echo '    'echo RAW-file $localRAW does NOT exist locally, waiting 5 mins and trying again >>$fileName
		echo '    sleep' 300 >>$fileName
		# FG: CTA/CASTOR
		#    echo '    'xrdcp -f -N 'root://castorpublic.cern.ch/'$CastorRAW '$locdir/'$localRAW >> $fileName
		echo "    $command " >>$fileName
		echo '    'wait >>$fileName
		echo '  endif' >>$fileName
		echo 'end' >>$fileName
		echo ' ' >>$fileName

		echo echo >>$fileName

		# PROCESSING HERE
		echo ' ' >>$fileName
		echo echo >>$fileName
		echo echo ls -lah '$locdir/' >>$fileName
		echo ls -lah '$locdir/' >>$fileName
		echo echo >>$fileName

		outFile=$(echo ${prefix}'_'${segment}'_'${stream}'.out')
		rootFile=$(echo ${prefix}'_'${segment}'_'${stream}'.root')
		lockFile=$(echo ${prefix}'_'${segment}'_'${stream}'.lock')

		echo ' ' >>$fileName

		echo 'echo Raw2Root Start' >>$fileName
# Michi 20/09/2022: remove verbose, and remove redirect output
		#echo $prg -v -l '${locdir}/'$lockFile -i '${locdir}/'$localIDX -f '${locdir}/'$localRAW -p $UserInput -r '${locdir}'/$rootFile '> ${locdir}/'${outFile} '&' >>$fileName
		echo $prg -l '${locdir}/'$lockFile -i '${locdir}/'$localIDX -f '${locdir}/'$localRAW -p $UserInput -r '${locdir}'/$rootFile '&' >>$fileName

		echo echo >>$fileName
		echo echo >>$fileName

		echo ' ' >>$fileName
		echo wait >>$fileName
		echo ' ' >>$fileName
		echo echo rm -rf '$locdir/'*.raw.finished >>$fileName
		echo rm -rf '$locdir/'*.raw.finished >>$fileName
		echo wait >>$fileName
		echo echo >>$fileName
		echo ' ' >>$fileName
		echo ' ' >>$fileName

		if [ "$stream" -eq "$streamcounter" ]; then

			echo echo Merging output files and deleting the output-sources >>$fileName

			outmerge=$(echo ${outFile%_*})
			echo 'cat ${locdir}/'$outmerge'_'*.out' > ${locdir}/'$outmerge.out >>$fileName

			outprepare=$(echo ${outFile%.*})
			outdelete=$(echo "${outprepare%?}")
			echo rm -rf '${locdir}/'$outdelete*.out >>$fileName

			echo ' ' >>$fileName
			echo ' ' >>$fileName
		fi
	fi

	counter=$((counter + 1))

done <"$listFile"

echo ' ' >>$fileName
echo ' ' >>$fileName
echo echo >>$fileName
echo ls -lah >>$fileName
echo echo >>$fileName
echo ' ' >>$fileName
echo ' ' >>$fileName
echo ' ' >>$fileName

echo ' ' >>$fileName
echo echo >>$fileName
echo 'echo MergingRootData ' >>$fileName
echo hadd '${locdir}'/${prefix}.root '${locdir}'/*.root >>$fileName
echo ls -lah '${locdir}' >>$fileName
echo ' ' >>$fileName

# check if EOS is available
#echo ' ' >> $fileName
#echo 'set EOSAvailable=`eos ls '$EOSPATH/$destdir' |& grep -c cannot`' >> $fileName
#echo 'while ( "$EOSAvailable" != 0 )' >> $fileName
#echo '  echo EOS not available-$EOSAvailable going to sleep' >> $fileName
#echo '  sleep' 300 >> $fileName
#echo '  set EOSAvailable=`eos ls '$destdir' |& grep -c cannot`' >> $fileName
#echo '  echo EOSAvailable $EOSAvailable' >> $fileName
#echo 'end' >> $fileName
#echo ' ' >> $fileName

#echo ' ' >> $fileName
#echo 'set EOSAvailable=`eos ls '$destdir' |& grep -c cannot`' >> $fileName
#echo 'while ( "$EOSAvailable" != 0 )' >> $fileName
#echo '  echo EOS not available-$EOSAvailable going to sleep' >> $fileName
#echo '  sleep' 300 >> $fileName
#echo '  set EOSAvailable=`eos ls '$destdir' |& grep -c cannot`' >> $fileName
#echo '  echo EOSAvailable $EOSAvailable' >> $fileName
#echo 'end' >> $fileName
#echo ' ' >> $fileName

echo echo $userXRDCP '${locdir}'/${prefix}.root $EOSPATH/$destdir/. >>$fileName
echo $userXRDCP '${locdir}'/${prefix}.root $EOSPATH/$destdir/. >>$fileName


##Added by victor
echo echo $userXRDCP '${locdir}'/${prefix}.root $EOSPATH/$destdir/. >>$fileName
echo $userXRDCP '${locdir}'/${prefix}.root $EOSPATH/$destdir/. >>$fileName


echo echo $userXRDCP '${locdir}'/${prefix}.root $EOSPATH/$destdir/. >>$fileName
echo $userXRDCP '${locdir}'/${prefix}.root $EOSPATH/$destdir/. >>$fileName

echo echo 'cp ${locdir}'/${prefix}.root $EOSPATH/$destdir/. >>$fileName
echo  'cp ${locdir}'/${prefix}.root $EOSPATH/$destdir/. >>$fileName

echo echo 'Added by victor ' >>$fileName
echo echo $EOSPATH/$destdir/${prefix}.root  >>$fileName
echo set NAMEFILE=$EOSPATH/$destdir/${prefix}.root  >>$fileName
echo echo '$NAMEFILE' >>$fileName
echo echo 'set SizeFile = `stat -c %s $NAMEFILE`'>>$fileName
echo 'set SizeFile = `stat -c %s $NAMEFILE`'>>$fileName

 #echo echo 'if  ($SizeFile < 1000)  then; echo the file is big $SizeFile; delete  $NAMEFILE; endif ; '>>$fileName
 echo 'if  ($SizeFile < 1000)  then'>>$fileName 
 echo echo ' the file is small so I delete it'>>$fileName 
 echo 'rm  $NAMEFILE'>>$fileName
 echo 'else'>>$fileName 
  echo echo 'the file is big, so nothing is done'>>$fileName
  echo 'endif'>>$fileName
 


echo echo 'Added by victor ' >>$fileName
# Michi 20/09/2022: avoid double copy - xrdcp should work (was legacy)
#echo echo cp '${locdir}'/${prefix}.root $EOSPATH/$destdir/. >>$fileName
#echo cp '${locdir}'/${prefix}.root $EOSPATH/$destdir/. >>$fileName

echo ' ' >>$fileName
echo ' ' >>$fileName
echo ' ' >>$fileName

#echo 'set FileSizeHTCondor=`stat --printf="%s" ${locdir}'/${prefix}.root'`' >>$fileName
#echo 'set FileSizeEOS=`stat --printf="%s" '$destdir/${prefix}.root'`' >>$fileName
#echo 'echo FileSizeEOS $FileSizeEOS' >>$fileName
#echo 'echo FileSizeHTCondor $FileSizeHTCondor' >>$fileName
#echo 'while ( "$FileSizeEOS" != "$FileSizeHTCondor" )' >>$fileName
#echo '  echo FileSizeEOS $FileSizeEOS' >>$fileName
#echo '  echo FileSizeHTCondor $FileSizeHTCondor' >>$fileName
#echo '  'xrdcp -f -N '${locdir}'/${prefix}.root $EOSPATH/$destdir/. >>$fileName
#echo '  set FileSizeEOS=`stat --printf="%s" '$destdir/${prefix}.root'`' >>$fileName
#echo 'end' >>$fileName
#echo ' ' >>$fileName

# check if EOS is available
#echo ' ' >> $fileName
#echo 'set EOSAvailable=`eos ls '$destdir' |& grep -c cannot`' >> $fileName
#echo 'while ( "$EOSAvailable" != 0 )' >> $fileName
#echo '  echo EOS not available-$EOSAvailable going to sleep' >> $fileName
#echo '  sleep' 300 >> $fileName
#echo '  set EOSAvailable=`eos ls '$destdir' |& grep -c cannot`' >> $fileName
#echo '  echo EOSAvailable $EOSAvailable' >> $fileName
#echo 'end' >> $fileName
#echo ' ' >> $fileName

echo ' ' >>$fileName
echo echo >>$fileName
echo 'echo MoveHistoryAndSettings: ' >>$fileName
echo xrdcp -f -N '${locdir}'/settings*.root $EOSPATH/$destdir/. >>$fileName
echo xrdcp -f -N '${locdir}'/history*.root $EOSPATH/$destdir/. >>$fileName
echo rm -rf '${locdir}'/settings*.root >>$fileName
echo rm -rf '${locdir}'/history*.root >>$fileName

echo ' ' >>$fileName
echo echo >>$fileName
echo 'echo MoveOutputs: ' >>$fileName
echo 'cat ${locdir}/run'*.out' > ${locdir}/'${prefix}.r2r.out >>$fileName
#echo mv '${locdir}'/${prefix}.r2r.out '$submitDIR'/. >> $fileName

echo ' ' >>$fileName
echo echo >>$fileName
echo 'echo MoveCore: ' >>$fileName
echo mv '${locdir}'/core'*' '$submitDIR'/. >>$fileName

echo ' ' >>$fileName
echo echo >>$fileName
echo 'if ( -f *.lock ) then' >>$fileName
echo '  echo One or more raw2root not finished, .lock exists, creating/moving .lock file' >>$fileName
echo '  'touch '${locdir}/'${lock} >>$fileName
echo '  'mv '${locdir}/'${lock} '$destdir'/. >>$fileName
echo 'endif' >>$fileName
echo 'if ( -f core.* ) then' >>$fileName
echo '  echo One or more raw2root not finished, core dump exists, creating/moving .lock file' >>$fileName
echo '  'touch '${locdir}/'${lock} >>$fileName
echo '  'mv '${locdir}/'${lock} '$destdir'/. >>$fileName
echo 'endif' >>$fileName

chmod +x $fileName
